// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc_user_domain.proto

package user_domain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCommendClient is the client API for UserCommend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCommendClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*UserIdResp, error)
	UpdateNickname(ctx context.Context, in *UpdateNicknameReq, opts ...grpc.CallOption) (*UserIdResp, error)
	UpdateAge(ctx context.Context, in *UpdateAgeReq, opts ...grpc.CallOption) (*UserIdResp, error)
	UpdateGender(ctx context.Context, in *UpdateGenderReq, opts ...grpc.CallOption) (*UserIdResp, error)
}

type userCommendClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCommendClient(cc grpc.ClientConnInterface) UserCommendClient {
	return &userCommendClient{cc}
}

func (c *userCommendClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*UserIdResp, error) {
	out := new(UserIdResp)
	err := c.cc.Invoke(ctx, "/user_domain.userCommend/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommendClient) UpdateNickname(ctx context.Context, in *UpdateNicknameReq, opts ...grpc.CallOption) (*UserIdResp, error) {
	out := new(UserIdResp)
	err := c.cc.Invoke(ctx, "/user_domain.userCommend/updateNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommendClient) UpdateAge(ctx context.Context, in *UpdateAgeReq, opts ...grpc.CallOption) (*UserIdResp, error) {
	out := new(UserIdResp)
	err := c.cc.Invoke(ctx, "/user_domain.userCommend/updateAge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommendClient) UpdateGender(ctx context.Context, in *UpdateGenderReq, opts ...grpc.CallOption) (*UserIdResp, error) {
	out := new(UserIdResp)
	err := c.cc.Invoke(ctx, "/user_domain.userCommend/updateGender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCommendServer is the server API for UserCommend service.
// All implementations must embed UnimplementedUserCommendServer
// for forward compatibility
type UserCommendServer interface {
	Create(context.Context, *CreateReq) (*UserIdResp, error)
	UpdateNickname(context.Context, *UpdateNicknameReq) (*UserIdResp, error)
	UpdateAge(context.Context, *UpdateAgeReq) (*UserIdResp, error)
	UpdateGender(context.Context, *UpdateGenderReq) (*UserIdResp, error)
	mustEmbedUnimplementedUserCommendServer()
}

// UnimplementedUserCommendServer must be embedded to have forward compatible implementations.
type UnimplementedUserCommendServer struct {
}

func (UnimplementedUserCommendServer) Create(context.Context, *CreateReq) (*UserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserCommendServer) UpdateNickname(context.Context, *UpdateNicknameReq) (*UserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNickname not implemented")
}
func (UnimplementedUserCommendServer) UpdateAge(context.Context, *UpdateAgeReq) (*UserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAge not implemented")
}
func (UnimplementedUserCommendServer) UpdateGender(context.Context, *UpdateGenderReq) (*UserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGender not implemented")
}
func (UnimplementedUserCommendServer) mustEmbedUnimplementedUserCommendServer() {}

// UnsafeUserCommendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCommendServer will
// result in compilation errors.
type UnsafeUserCommendServer interface {
	mustEmbedUnimplementedUserCommendServer()
}

func RegisterUserCommendServer(s grpc.ServiceRegistrar, srv UserCommendServer) {
	s.RegisterService(&UserCommend_ServiceDesc, srv)
}

func _UserCommend_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommendServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_domain.userCommend/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommendServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommend_UpdateNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommendServer).UpdateNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_domain.userCommend/updateNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommendServer).UpdateNickname(ctx, req.(*UpdateNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommend_UpdateAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommendServer).UpdateAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_domain.userCommend/updateAge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommendServer).UpdateAge(ctx, req.(*UpdateAgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommend_UpdateGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommendServer).UpdateGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_domain.userCommend/updateGender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommendServer).UpdateGender(ctx, req.(*UpdateGenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCommend_ServiceDesc is the grpc.ServiceDesc for UserCommend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCommend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_domain.userCommend",
	HandlerType: (*UserCommendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _UserCommend_Create_Handler,
		},
		{
			MethodName: "updateNickname",
			Handler:    _UserCommend_UpdateNickname_Handler,
		},
		{
			MethodName: "updateAge",
			Handler:    _UserCommend_UpdateAge_Handler,
		},
		{
			MethodName: "updateGender",
			Handler:    _UserCommend_UpdateGender_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_user_domain.proto",
}
